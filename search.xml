<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[北京之行]]></title>
    <url>%2F2018%2F09%2F13%2F%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[北京之行行程篇9.8早上火车过去，9.11晚9点坐火车回来，全是Z开头，都是坐6个小时左右 9.8早上坐火车真心不算累，也可能大早上神清气爽，两个人开开心心吃饱喝足再出发的关系，但是，晚上回来的时候简直累死！！ 火车篇 火车硬座上睡觉是真心不舒服，时间再短也不行，而且还挤的慌。最最重要的是，我俩居然被分开了。。。为啥买票一个订单两个座会差那么多啊摔！！！ 去北京路上的风景挺好的，蓝天白云，看着电影吃着牛肉，没事望望玉米田。小虫子乱入 景点篇 故宫真的是跑断腿，但是建筑的宏伟霸气加上蓝天白云，超级超级美。 天安门广场也还好，各种震撼，特别搭配蓝天白云，顺便知道那么一点历史，心里特别有感觉，自己像一个伪历史见证者。但是天安门那一区域进去前要安检，但是这个安检只是做做样子，我觉着主要作用还是降低人流量，刷身份证才能进。不知道海外同胞是怎么过安检呢？ 中关村下了车，没感觉有啥特别的，反倒像奸商聚集地，歇了一会走人了。 北大清华两校没进去，北大是迎接新生呢，不让外来游客参观，清华园那边不想跑了。所以两个都没看成，只看了外面的样子。不过就我看到的，两个学校的校门是真的小，感觉其他学校校门都是一个比一个大，这是我们学校不用只看门面的意思吗？ 圆明园现在应该是只剩下旅游局在骗钱了，去游客中心存包人家不让存，可能是过点了（下午两点），印象分极低。当然，也可能是当时我俩都太累了，所以评价有失公道。里面大概是天鹅湖、沙盘模型、大水法（没被烧到和抢走的残石）。 看到大水法其实也挺有感慨的，毕竟国家屈辱的历史，不过更多的是百年前底层人民的悲惨，皇帝尚且有这么豪华巨大的园林（故宫的5倍大小），底层人民在面对战争的时候有什么呢？可能只剩下想活下去的意志了吧。然而不要偷这些名贵的文物啊、古树啊、石料啊，现在看来都是无价宝啊大爷们，你们把古树烧掉了弄成碳卖钱很不划算啊啊啊。当然树还能再长，和平万岁。 沙盘模型就是一个圆明园的缩略模型，离东门很近，路过了看一看还行。 天鹅湖没太有印象，当然风景很好~ 食物篇并不知道北京的特色是什么，灵光一闪那就是吃火锅了，老北京火锅，大铜锅，涮羊肉，美滋滋。 其实是没这个计划的，因为没钱，本来准备是看到啥吃啥，然而几乎上啥也没看到，要么看起来高级不敢进，要么小小餐馆还是不敢进。况且京城看起来真的是荒凉，不知道是大还是人都在外围或者是在工作，真真的看起来荒凉。人少买东西的少，但是比郑州要干净太多了。 早上在普通餐馆吃了东西，还行，不贵，听着人说带京味儿的口音还挺有意思。 跑过故宫后那个累，然而故宫北门周边并没有那种坐下来就吃的小馆子。于是北门涮肉走起。 从故宫北门走了约1.7公里，期间的小巷子小破路一度让我认为是不是走错了。还好在倒下前走到了。 说下食物，北京的铜锅涮肉都讲究清汤，一个大铜锅（给我们的是小的→_→)，中间是碳，汤开了就能咕嘟咕嘟的涮起肉来。 这个清汤锅底收我20块好不爽啊，我好穷⊙︿⊙ 鲜切羊肉一流，其他的都是还行，鲜切羊肉非常好吃，怎么描述那种感觉呢？我能说记不清了嘛。。。 其他的都是日常火锅，总之鲜切羊肉必点，39 五两。（顺便送一个伞，遮阳伞忘店里了╯﹏╰） 在这次北门火锅后还吃了另一家酒店不远的羊火涮肉，同样的操作，但是便宜太多，作为吃饱喝足的地方那是极好的，想吃特色肉这里就不太行了，都是冷冻的，鲜切（名义）羊肉吃起来也没那种感觉。 好像只是吃了两顿火锅次次吃到饱，吃饭次数好少~ 演唱会篇去北京当然是为了看花花演唱会啦，提前准备了这么久，不好好享受演唱会怎么行！！！ 所以我跑神了好多，摔。 心里压力大是一方面，我来说说让我出戏的要点： 98场 那个位置已经快是距花花最远的地方了，以我的视力很难看清楚，举着望远镜也不现实（还是只能看屏幕，看人还是远远的看的感觉） 乐器声要不要这么大啊，这一场说实话人声很小，不知道是混音的关系还是座位的关系。 总之我看不到也听不到人声，只能随着音乐嗨，进不了状态，频频出戏 99场 团票的位置果然更好，但是坐的更高更远了，能看到花花的影子，大屏幕还是看不太清。 跑了一天了真心累 个人最喜欢的两首：地球之盐、我~刚好一首开场，一首收尾~ 话说花花真的是太拼，嗓子做了雾化打了封闭，结果还是唱，而且可怕的是高音依然稳，虽然第二场有所收敛但同样各种炸，果然要吹爆我花。 1封闭主要是指将激素类的药物和局部麻醉药物混合在一起注射到疼痛或者炎症的部位， 但是也太拼了，身体会受不了的，吸血公司也是够够的： 看这行程 希望花花能早日离开这种吸血公司~ 总结这次北京行：开心~ 做人嘛，最重要的就是开心。 努力自由咯。]]></content>
      <tags>
        <tag>生活</tag>
        <tag>华晨宇</tag>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始sicp的旅程吧，scheme要跑起来]]></title>
    <url>%2F2017%2F12%2F30%2F%E5%BC%80%E5%A7%8Bsicp%E7%9A%84%E6%97%85%E7%A8%8B%E5%90%A7%2F</url>
    <content type="text"><![CDATA[作为一只萌新，知识可不能仅靠工作上的摸索踩坑和单纯经验上的积累，深入基础是十分有必要滴，而且还得应付考试不是，考试是个好理由，不敢拒绝。有需要也有必要补足计算机基础知识，那么作为野生程序员，咋么做呢？参考前人的经验，首选自然是萧大的编程入门指南,而我现在不应该再入门了吧，那自然搞起sicp啦。 为什么要学sicp多人推荐，评分高，那就没的说了呗。大部分理由都可以参见这篇文章：老赵书托（2）：计算机程序的构造与解释 - 老赵点滴 - 追求编程之美 为什么不学python版本的sicp说实话学python版的的确效率高、收益大，不过我也有自己的考虑。 - 我看过一遍python版的中文翻译，然而并不懂，和其他的python书看起来并没什么区别，或许我当年太弱鸡？ - 基于上，python版的就要配合课程进行学习，然而时间决定了我目前不太能常看视频 - 谁说的刷了老版的就看不了新版的哦，cs61扔入计划 准备工作ok,开始了没什么疑问，然而刚刚上去我就经受了小小打击，那就是sicp所用的语言。scheme应该是简单但强大的语言了吧，但着实小众，作为方言还有方言，怎么运行成了一个问题。依我目前的了解，有以下几种方法跑。 - 云端跑 - 好处 - 复制粘贴即可运行 - 坏处 - 浏览器必须的 - 联网必须的 - 复杂了就玩不转了 - 本地跑 - Emacs + 插件 - 好处 - 未知，因为下载了并没有安装，但是听说这是个神级编译器，参见[一年成为 Emacs 高手 (像神一样使用编辑器)](https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org)对手是vim等，以后有缘再见吧 - 坏处 - 没用过，上手需要熟悉一段时间 - 开源包，如Racket、MIT Scheme - 参考[程序设计技术和方法](http://www.math.pku.edu.cn/teachers/qiuzy/progtech/) - 好处 - 安装即用 - 坏处 - 在老婆的电脑上装了MIT Scheme，运行及其不便，可能因为我是萌新吧 - windows不友好，自我感觉 - Racket并不能做所有sicp的题目 - 扩展包，如biwascheme - 此项目官网[biwascheme](http://www.biwascheme.org/) - 好处 - 不仅能本地运行，还能使用本地JavaScript来跑，HTML中看结果，简直666 - 不仅能在HTML里预览，还可以扔到JavaScript来跑，更加666。参见[Github](https://github.com/biwascheme/biwascheme) - 坏处 - 未知 以上准备运行的参考资料：1、sicp学习前的几个准备资料2、安装scheme解释器3、Scheme 编程环境的设置4、MIT-scheme biwascheme的使用好处多多，作为前端用起vscode又很方便，HTML预览也好，run code一键都很方便，那肯定是用它的咯。How to use with HTML： 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;div id=&quot;bs-console&quot;&gt;&lt;/div&gt; &lt;script src=&quot;biwascheme.js&quot;&gt; (define (test x) (+ x x)) (print (test 2)) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; How to use with node.js to run a biwa script 1234567$ npm install biwaschemecreate a file a.scm:(display &quot;Hello, world!&quot;) (newline)$ biwas a.scm How to use from inside node.js as a module 1234567$ npm install biwaschemecreate a file server.js:var BiwaScheme = require(&quot;biwascheme&quot;); BiwaScheme.run(&quot;(+ 1 2)&quot;); // or // BiwaScheme.run_file(&quot;a.scm&quot;);$ node server.js 这样子可以愉快的刷题啦，希望可以帮到你们。我这样子这么费时费力的记录还有时间看书吗，摔！]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>sicp</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序框架——wepy]]></title>
    <url>%2F2017%2F12%2F27%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94wepy%2F</url>
    <content type="text"><![CDATA[小程序的写法实在不太敢恭维。wepy参照了Vue的一些风格和特性，对小程序开发进行二次封装，更贴近MVVM架构。 文件说明 wpy文件可使用Vue的代码提示和代码风格 wpy文件内容主要分三块，脚本、结构、样式。三个标签均支持lang和src属性，当src属性有效时，会忽略内联代码 脚本部分 入口 继承自wepy.app类，此处语法参见ES6实现继承 改进 小程序对组件化支持非常不友好，wepy改进了组件开发的方法。组件的所有业务和功能在本身实现，组件之间彼此隔离]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——zepto对象好用的方法都是如何设计的]]></title>
    <url>%2F2017%2F09%2F30%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94zepto%E5%AF%B9%E8%B1%A1%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%9A%84%2F</url>
    <content type="text"><![CDATA[zepto的核心方法一部分通过给$增加属性而给$(要知道$是一个函数，即是一个对象)，另一部分定义在$.fn这个属性上，然后将zepto.Z.prototype指向$.fn，即所有的Z对象的proto指向$.fn，于是可访问到其中的方法。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——设计]]></title>
    <url>%2F2017%2F09%2F27%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[zepto对象zepto或是jQuery的设计思想几乎是一致的，通过选择器获取一个DOM对象，然后对这个对象进行操作。我们来看zepto对象是什么样子。进入Zepto文档界面，打开控制台，使用$取一个元素，将它打印出来。1&lt;h3 id=&quot;download&quot;&gt;下载 Zepto&lt;/h3&gt; 这个元素用的是id呀，就它了 12345let ele = $(&apos;#download&apos;)ele[h3#download, selector: &quot;#download&quot;]Array.isArray(ele)true 看起来是一个数组对象，但实际上并不是,isArray()不要骗人啊~我们知道JavaScript中数组是Array对象的实例，那么ele是么？ 1234ele.__proto__.constructor === Array;falseele instanceof Arrayfalse instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。显而易见，ele并不是Array构建出来的，用Array构建出来也没那么多方法用啊，除非大规模重写Array的proto对象，那不是太惨了。 那么是谁构建了这个类数组对象？我们先来看看$ $ ƒ (selector, context){ return zepto.init(selector, context) $是一个函数来看看源码 var Zepto = (function() { })() window.Zepto = Zepto window.$ === undefined &amp;&amp; (window.$ = Zepto) $被挂载到window上，要知道在浏览器中所有JavaScript 全局对象、函数以及变量均自动成为window 对象的成员，所以$是全局对象，且是Zepto函数，很明显Zepto函数是一个构造函数。 源代码解析部分请配合源代码和搜索食用 zepto.init前面已经知道$是一个函数，参数为(selector,context)，返回一个函数，我们先来看看返回的函数是什么样子。搜索到zepto.init，可以看到英文注释： `$.zepto.init` is Zepto&apos;s counterpart to jQuery&apos;s `$.fn.init` and takes a CSS selector and an optional context (and handles various special cases). // This method can be overriden in plugins. 简单来说就是这个方法类似jQuery的$.fn.init方法，传入一个CSS选择器和一个上下文。这个函数还能被插件改写。显而易见，这是为了生成之前的类数组对象做准备，选取其中的dom与环境，来看看这个函数的内部。$函数的作用有以下几种： 把普通DOM对象包装成zepto对象 当页面ready时加载函数 充当选择器选择DOM并将其包装成zepto对象 生成一个dom元素 详情分析请看源代码解析部分。加载函数部分比较好理解，我们先来看看是如何构建zepto对象的。 构建zepto对象当selector是选择器时，查找dom。 zepto.qsa()方法用来选择dom，使用字符串匹配后分别使用各种get方法进行选择dom，最后特殊情况使用querySelectorAll和querySelector。因为它俩的速度要慢得多 找到dom后把dom与selector传给zepto.Z这个构造函数。 zepto.Z = function(dom, selector) { dom = dom || [] dom.__proto__ = $.fn dom.selector = selector || &apos;&apos; return dom } zepto.Z.prototype = $.fn 可以看到dom的隐式原型被指向$.fn,zepto.Z.prototype也被指向$.fn，因为隐式原型与显式原型的关系，实际上只要一个生效就生效了。$.fn中定义了zepto类数组对象所有方法，通过原型链这些方法就可以共享啦。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——序]]></title>
    <url>%2F2017%2F09%2F27%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[为什么17年还要读zepto的源码？问这个问题首先要清除为什么读源码。程序员阅读源码是一种什么心态？源码对编程意义何在？如何才能更好阅读代码？这个问题高票答案基本上已经解释的很好了，但我还想再补充几点。 - 向优秀的人学习，这个毫无疑问。 - 人大多是依靠模仿学习的，想要模仿，必须先了解。 - 巩固基础，而基础有多重要就不用说了吧。 确实mvvm框架极火爆，也的确好用，但是依我现在目前的水平来看（js基础不是很牢，计算机基础也跟不上），学习优秀库是一个极其方便且好用的学习以及复习策略。 为什么是zepto？zepto大家都说好。还有一点是在几个月以前我已经根据前辈的源码分析熟悉了一遍并自己仿制了一个类zepto的库，重拾起来应该更轻松。还有一点，zepto的分析已经有很多人进行了，资料也很多，基本上没什么大问题，但是大都有一点缺点，就是不够通俗易懂。依我来看前端JavaScript水平的差距是巨大的。初学者可能一点一点的啃过基础大部头，以为自己已经了解了JavaScript，却被实际的各种用法所困惑。我作为一个初学者，希望可以通过阅读和拆析zepto的源码来略微的垫高这一沟壑。 究竟怎么阅读？读之前首先一定要会用吧，如果不会用建议去看看zepto的文档，和jQuery很像。会了基本的用法之后就可以准备阅读了。首先需要源代码的源文件，其次要找好的资料。 什么才算是好的资料？在我看来至少要满足以下几点： - 语句通顺易懂 - 不办弄概念 - 最好能引导人进行主动阅读 - 对一些概念进行扩展 在zepto源码分析的诸多资料中，个人认为称的上好的资料应当是王福朋老师的zepto设计和源码分析,在慕课网上的课程讲解十分详细，但个人推荐阅读文字版.在js进阶的资料中，个人认为最好的应当是曾探老师的JavaScript设计模式与开发实践]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
        <tag>自述</tag>
      </tags>
  </entry>
</search>

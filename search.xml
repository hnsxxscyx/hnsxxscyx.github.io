<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[别再滚了 - 现在就要解决你的滚动穿透问题]]></title>
    <url>%2F2022%2F03%2F17%2F%E5%88%AB%E5%86%8D%E6%BB%9A%E4%BA%86-%E7%8E%B0%E5%9C%A8%E5%B0%B1%E8%A6%81%E8%A7%A3%E5%86%B3%E4%BD%A0%E7%9A%84%E6%BB%9A%E5%8A%A8%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[前言日常 web 开发中，我们经常遇到想要滚动某元素，但却导致了其他元素发生了滚动的问题。 比如我们某元素使用了浮层，当浮层无法滑动时，我们尝试滑动浮层，会发现浮层下的元素（通常来说是页面）发生了滚动，这就是滚动穿透。 而元素滚动到底时，再尝试滚动会导致元素的可滚动父级开始滚动，这就是滚动链(Scroll Chaining)，如下 demo: See the Pen 滚动穿透 by 不得不错 (@hnsxxscyx) on CodePen. 通常来说这并不是什么问题，尤其是在桌面端，但移动端的滚动会尤其让用户感觉奇怪。 如果你也遇到了这样的问题，那不妨从下面找一下解决方案。 原因通常的滚动不是我们自己实现的，利用 transform 等模拟 scroll 的库也不会有滚动穿透的现象发生。 是因为子元素的 scroll 事件冒泡到根节点，导致根节点进行滚动了吗？ 实际上并不是，在子元素上，scroll event 其实是不冒泡的，参见!(MDN)[https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event]。而 document 上 的滚动是冒泡的，这就是为什么我们监听页面滚动时可以将监听事件挂载到 document 或 window 上。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Taro 多端统一的开发解决方案浅析]]></title>
    <url>%2F2021%2F09%2F16%2FTaro%20%E5%A4%9A%E7%AB%AF%E7%BB%9F%E4%B8%80%E7%9A%84%E5%BC%80%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前言 同一个世界，同一个梦想。Write once, run everywhere 是每个开发者心中的梦。 无需特别注意端的差异，把更多的精力放在业务与coding 上，无数的框架也在这个方向上持续改进和努力着。 17年1月，微信小程序正式上线，与web 相近的开发方式与微信上亿的用户基数让小程序迅速在”前端圈“走红，无数小程序也在开发和被开发的路上。但因种种原因，原生微信小程序的开发方式并不尽如人意，前端生态的丰富资源及开发模式也无法直接被引入小程序的开发流程。 为了改善开发小程序的开发体验及提交开发效率，Taro应运而生，它使用了类react 的语法，并且积极引入了前端流行的开发流程，并实现了一套代码多端复用（小程序、H5、React native)，在最近的大版本更新中，更是支持了React/Vue2/Vue3，让多端开发体验更加优雅和高效。 让我们一起来看看Taro 是怎么做的。 尝试一下Taro build我们可以新建一个空白的Taro 模板项目，然后使用taro build 命令将项目打包，我们再来一起看看Taro 做了什么。我们先使用Taro 2 进行build看看。 小程序由于小程序的原理大同小异，微信小程序几乎又是小程序的实际标准，所以build 小程序就以微信小程序来举例。 忽略掉模板代码，build 完成后多出了dist 文件夹，目录下就是产出的微信小程序项目文件。目录结构如下：123456789101112131415161718192021|-- dist| |-- app.js| |-- app.json| |-- app.wxss| |-- project.config.json| |-- npm| | |-- @tarojs| | |-- taro| | | |-- index.js| | | |-- dist| | | |-- index.js| | |-- taro-weapp| | |-- index.js| | |-- dist| | |-- index.js| |-- pages| |-- index| |-- index.js| |-- index.json| |-- index.wxml| |-- index.wxss 从dist 文件夹可以看出，输出代码遵循了微信小程序所要求的目录结构。 我们从pages 入手，看一下打包后的文件。 pages 下的json, wxml 与wxss 文件json 文件中的配置想很明显是微信小程序所要求的的页面配置项。 再看wxml 文件，很明显可以看出它就是普通的微信小程序模板，只不过与Taro 原始项目文件相比多了一层block 标签。 而wxss 文件也是普通的微信小程序wxss 样式语言。 由此可以简单推测，Taro 在转换为微信小程序时几乎把原代码转成了微信小程序所支持的语法，以此来在平台上运行。 pages 下的js 文件js 文件是经过编译过的，不太方便阅读，但是某些函数基本上还是能一一对应的，比如在return 的_createClass 方法中仍然能看到react 生命周期函数，如componentWillMount、componentDidMount 等。 在文件末尾，还可以看到js 文件导出了一个变量，并将此变量传入了createComponent 方法。 h5执行taro build –type h5，等build 完成后多出的是.temp 与dist文件夹，目录如下：12345678910111213141516171819|-- .temp| |-- app.js| |-- app.scss| |-- index.html| |-- pages| |-- index| |-- index.js| |-- index.scss|-- dist| |-- index.html| |-- chunk| | |-- 2.js| | |-- index_index.js| |-- css| | |-- 2.css| | |-- app.css| | |-- index_index.css| |-- js| |-- app.js 从dist 目录下的文件来看，输出的文件似乎与普通web 应用打包后的文件没什么不同。但.temp 文件夹下就奇怪了，这个目录是干做什么用的？ .temp 目录下的文件我们先来看app.js, 除去taro 的某些api(如createHistory、initPxTransform)，它似乎与普通的React 语法没什么不同，同样的生命周期方法，同样最后使用了render方法，只不过是引入和使用了Nerv，当然，Nerv 使用了和React 16一致的使用方式与API。 再让我们去看pages 下的文件，又是典型的React 语法，只不过jsx 中使用的标签是微信小程序标签名，如View，Text。它们又是从@tarojs/components 引入的。对比源代码后就更奇怪了，似乎.temp 目录只是将Nerv 引入了项目，究竟发生了什么？ 基本原理分析 - 如何把一套代码转换为另一套代码让我们忽略其他所有的因素，回到问题最初的原点：我有一套代码，我想通过某些操作，直接让它在另一个运行环境运行，应该怎么做？ 答案很简单，把这套代码转译成目标运行环境所支持的代码就好，例如PythonJs 或者Transcrypt。实际上，Taro 2 正是这么做的。 说起来简简单单，实际做起来可没那么容易，这样的代码转换其实就是编译原理的内容，作为计算机基础重要的专业课，涉及到语言和文法、词法分析、语法分析、中间代码生成和目标代码生成。幸好，JavaScript 生态足够丰富，大量的工具可以直接使用。Taro 就在转换这个最核心的部分大量的借用了Babel 模块。 编译BabelBabel是JavaScript的转换编译器，日常开发中接触最多的就是使用其将ES6+ 代码转换为向后兼容的JavaScript 语法。但它能做的远不止这些。 借助于@babel/parser,Babel 可以解析JavaScript/TypeScript/JSX 等为AST(Abstract Syntax Tree)。当代码被转为AST 时，代码对于开发者来说只是一个遵循规则的树状数据结构，这时我们就可以对代码进行一系列的操作。比如我们常用的ESlint，就是将代码转换为了AST再对其进行语法检查、错误提示等（ESlint 使用的parser为espree)。 例如let a = 1;解析为AST 后就是： 12345678910111213141516171819202122232425262728293031323334 &#123; "type": "Program", "start": 0, "end": 10, "body": [ &#123; "type": "VariableDeclaration", "start": 0, "end": 10, "declarations": [ &#123; "type": "VariableDeclarator", "start": 4, "end": 9, "id": &#123; "type": "Identifier", "start": 4, "end": 5, "name": "a" &#125;, "init": &#123; "type": "Literal", "start": 8, "end": 9, "value": 1, "raw": "1" &#125; &#125; ], "kind": "let" &#125; ], "sourceType": "module"&#125; 也可以使用AST explorer来在线看一下一段代码被转换AST 的结构。 代码转换为AST 之后，还需要对节点进行处理，@babel/traverse可以方便的遍历节点树，并且可以方便的对其进行删除、添加、替换。 最后，借助于@babel/generator, 我们可以将AST 转换为code。 借助于babel的这几个package，已经可以方便的实现将遵循规范的源代码转换为目标代码这一流程。 仅使用生态的力量是不够的，作为新兴的平台，小程序自己定义了一套DSL，所以由AST 转为小程序代码的工作只能Taro 自己来完成。 转换小程序的这一部分的核心位于taro-transformer-wx。 从src/index.ts 的transform方法也可以看出，taro 在转换代码时的流程依然是解析、处理、生成这一流程。 运行小程序的运行编译让本不能运行的代码在环境中可以运行（比如ES6 被编译为ES5，就可以运行在绝大多数的浏览器环境），但并非所有的问题都需要靠编译来解决。 在微信小程序中，页面使用Page 方法传入一个对象，如果借助编译的话，那就是需要将Class 或者 Function 都编译为对象，并将属性一一对应起来。这样做不仅让编译的工作变得复杂多变，当出现异常时出错crash 的几率也变得特别高。 Taro 使用了非常聪明的方法解决了这个问题，页面使用的是对象，那最终传给它一个对象不就完了？所以在小程序中，Taro 实现了createComponent 方法，将原本的Taro 类，转换为小程序所需要的Object。createComponent 方法主要做了三件事：将state 转换为小程序的data;将Taro 的生命周期映射到小程序生命周期；将事件处理函数映射到小程序的事件处理函数。 映射生命周期与时间处理函数比较好理解，所以我们重点关注一下state 的转换。 忽略掉其他因素，可以简单的将state 直接对应为小程序的data。但jsx 的写法多变，小程序的模板却无法像jsx 那样灵活，例如在render 函数中，生成了新变量（state 的数据先经过处理，如map、filter后再使用）。Taro 使用了一个_createData 方法来处理这种情况，render return 前所有定义变量或对props、state 产生新变量的操作，都会被编译到_createData方法来执行，并且在data 中创建一个新变量，使其可以映射到小程序的模板上。 h5 的运行之前在build 时已经发现，h5 的build 会多出一个.temp 文件夹，里面的代码最为明显的改动似乎只是引入了Nerv。作为纯粹的web 框架，小程序组件肯定是不存在于web端的，如何使用小程序的组件，是使用h5 的第一个问题。 首先最好想到的方法，是像小程序编译一样，将小程序的原生标签编译为对应的HTML 标签，例如使用div 直接替换view，对于没有可以直接映射的组件或标签，如swiper，就直接维护一套组件，根据小程序的表现来实现组件，这样就可以在浏览器中运行了。 维护没有的组件没有什么问题，但view 与div 这种却不能一一对应。拿view 来说，在小程序中存在一些属性，如hover-class、hover-start-time 这些，在web 端并不存在。所以Taro 直接依照小程序，维护了一个实现小程序规范的web 版组件，这样，在web段的表现也能与小程序一致了。其他方面，Taro 自行在web 端补足了小程序的api，由于小程序的输入输出都非常清晰，Taro 只需要使用web 端来实现这些API，同时还能方便的进行promise 的包装。 Taro3 的不同解Taro2 只支持了类react 的写法，但是Taro3支持使用 React/Vue/Nerv 等框架来开发小程序、h5等应用，这又是怎么做到的？ 从两个版本的简介中可以明显看出不同，Taro 2 时介绍Taro 为 Taro 是一套遵循 React 语法规范的 多端开发 解决方案 而Taro 3则是支持使用React/Vue/Nerv 等框架来开发，甚至明确表示可以使用完整的React/Vue/Vue3/Nerv 开发体验。如果依照Taro 2 重编译的做法，恐怕Taro 要做巨量的工作来支持新语法，并且投入巨大的人力物力来维护生态。进一步来说，也绝对不可能打出使用完整的 xx框架开发体验，那么Taro 3 是怎么解决run everywhere 的问题的呢？ 在概述中，我们可以看到Taro 官方的说明： Taro 3 支持将 Web 框架直接运行在各平台，开发者使用的是真实的 React 和 Vue 等框架。 这是怎么实现的呢？似乎是框架作为运行时，可以跑在各个端上。 我们将taro-cli 升级，再创建一些taro 的模板项目来看一看。 首先选取框架为vue3，模板为vue3-vuex，然后执行taro build –type weapp，执行完毕后目录如下：12345678910111213141516171819202122232425262728293031323334353637|-- dist| |-- app.js| |-- app.json| |-- app.wxss| |-- base.wxml| |-- comp.js| |-- comp.json| |-- comp.wxml| |-- custom-wrapper.js| |-- custom-wrapper.json| |-- custom-wrapper.wxml| |-- project.config.json| |-- runtime.js| |-- taro.js| |-- taro.js.LICENSE.txt| |-- utils.wxs| |-- vendors.js| |-- vendors.js.LICENSE.txt| |-- pages| |-- index| |-- index.js| |-- index.json| |-- index.wxml| |-- index.wxss|-- src |-- app.config.js |-- app.js |-- app.scss |-- index.html |-- store.js |-- components | |-- NumberDisplay.vue | |-- NumberSubmit.vue |-- pages |-- index |-- index.config.js |-- index.vue 可以看出，模板代码中组件与页面都是.vue文件，编译后的则是小程序文件。奇怪的是，源代码中的components 并没有被生成对应的小程序组件，但却多了comp.xxx 一众文件，由comp.json 的内容可以看出，comp 即是编译后的自定义组件。而原模板组件中的样式，被编译到了pages/index.wxss 中。 Taro 3 到底做了什么？ 让我们再次回归问题的原点，小程序架构,Vue 虽然都借鉴了MVVM的设计，但与React 一样更类似于data =&gt; UI 的映射。如果说小程序团队有能力使用某种方式来实现数据到UI 的映射，那么React 与Vue作为浏览器层面的library，肯定是必须借助浏览器的API来实现映射的。 这些API，其实就是DOM/BOM 的相关API，简单来说，就是我只需要新建、修改、删除DOM 节点的能力，我就可以实现data =&gt; UI 的映射。 所以Taro next 改变了以往的思路，如果让操纵节点的API 跨端了，那么使用这些API 的框架也能跨端使用。更何况无论是小程序、React还是Vue都是使用Virtual Dom 的概念，并通过某些方式来使真实DOM 保持同步。 Taro 这部分的实现位于@tarojs/runtime，从node.ts 可以看出，它实现了大量的DOM 标准化方法（如insertBefore,removeChild）。 Vue 或是React 都自己维护着Virtual DOM，还需要一些操作让Virtual DOM 可以调取taro-runtime 的API，@tarojs/react就是小程序专用的react 渲染器，它让React 的Virtual DOM 可以调用Taro 自实现的node API。 在小程序编译阶段，Taro会将所有组件进行模板化处理，当Taro的 DOM tree 要渲染到页面上时，Taro 会基于组件的template 去动态的递归遍历渲染整棵树，这就是为什么上面编译出来的组件不会一一对应的原因，因为它们已经被模板化成为一个个的template了。]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Taro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们是如何在王者比赛中翻车的]]></title>
    <url>%2F2021%2F08%2F26%2F%E6%88%91%E4%BB%AC%E6%98%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E7%8E%8B%E8%80%85%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%BF%BB%E8%BD%A6%E7%9A%84%2F</url>
    <content type="text"><![CDATA[距离游戏比赛的惨败已经过去了6天，我个人心路历程:wtf-&gt;都是因为xxxxxxxxxxxxxxxx-&gt;输了就输了呗-&gt;要是选我的婉儿就好了说不定能翻盘再来-&gt;啊，游戏是真的费时间 目前还处在游戏好费时间啊，远离游戏，从我做起这一阶段。但说不准什么时候又变成了游戏真香。人呐，就是这么的奇奇怪怪。 失败的经验还是总结一下失败的经验，下次失败了不会这么震惊，搞的我两三晚都没睡好觉。 配合最核心的问题，与石家庄对阵的两局，5个人的配合只有两个字能说明，辣鸡，这个配合又完全是心态导致的。自从打败了西安，基本上确定了打决赛会很稳，几个人都飘的不成样子。在初步了解了石家庄的段位后，群里全是快活的气氛，换位置啦，怎么用xx 随意暴打xx啦之类的话。结果就是非常惨烈的翻车，第一局下来，其他人我不知道，我的心态是崩的。中路高地居然不是被逼塔或者我方有阵亡的情况下掉的，而是，漏兵线了。并且掉了后还在互相指责，我。第二局高地掉的更离谱，非要强开导致两路高地直接被兵线退了，张良接命令闪大后又不要打，这。总之配合非常离谱，正常来讲石家庄绝对打不过我们，但那两局他们的配合要比我们好的多的多。 配合如此不好的原因有一说一，并不是针对，局内矛头的起点就是ntg。队友失误了、被蹲草是非常正常且普通的事儿，职业选手还能被蹲草，没必要因为失误而说某些指责的话，而且也没听安排，事实上让虞姬全输出，炸弹猫+梦魇压制程咬金那不香吗？还有ly 的东皇吸人的时机不好，兵线处理的也不好，程咬金处于完全无人能压制的状态，两个人过去居然抓不死，中期居然还有抓到程咬金然后对面直接暂停游戏。喵喵喵，还能这样？？？总之节奏被彻底打乱，第一局最后一波简直像在送一样，三个人在中路无所事事结果被5人包饺子。第一局到第二局中间应该短暂的休息一下，转变一下心态。而我一直处于巨大的震惊当中（本来还算有优势莫名其妙浪输了），没换手机，没清醒一下，直接拉人准备了第二局。第二局本来想抢婉儿拯救局面，结果ntg 说拿太早被针对，但帮抢后放三楼和二楼其实效果没差，于是拿了昭君想打运营。这成了我输了游戏后后悔好几天的事儿。拿到昭君后对面选了吕布（大后期英雄）女娲（大后期英雄）露娜（中期英雄，但我方有张良与兰陵王作为克制点）。结果的结果，张良与兰陵王基本不限制露娜发育，不抢蓝不针对性抓单，露娜带线刷野美滋滋，昭君的作用完全没法发挥（清线转线快），迎来彻底失败。 游戏卡顿不得不说小米11 是真的辣鸡，我不知道为什么加了散热器后打一个王者还能掉帧掉到十几二十帧，第一局我玩露露基本上是屁股坐下去接下来要失联.5s的感觉，第二局没有选婉儿而是选昭君也有这方面的考量，实在是太卡了。888的性能完全没问题，就是MIUI 的锅，怕什么烧WiFi，稍微有点温度就限制性能，即使我加了散热器，这都还不够。骂小米也骂的够多了，无济于事。中途怎么就没想起来换小米10呢？又是一大后悔点。 精神状态不好晚上没睡好+拉肚子，老婆又是工作狂魔，一天我都在调bug，中午我跟老婆说你做饭吧，换来了嗯嗯然后拖到了一点我自己去搞，中午也没睡，十二分没有精神，全程就是迷糊状态，靠本能反应在打。 总结：事情还是要多多准备，骄兵必败。还有，辣鸡小米。 少打游戏多看书吧，王者游戏机制也实属阴间。辣鸡小米，但是挑来挑去还是只能选它，这就更气了哈哈哈。]]></content>
      <tags>
        <tag>游戏</tag>
        <tag>回顾</tag>
        <tag>团队协作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教你用Laravel-echo-server 建立广播系统]]></title>
    <url>%2F2021%2F07%2F28%2F%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8Laravel-echo-server%20%E5%BB%BA%E7%AB%8B%E5%B9%BF%E6%92%AD%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[开始之前 Laravel并没有官方的Socket.IO 服务器，所以我们使用Laravel-echo-server 这个第三方库，只要正确配置，无缝接入Laravel 需要会使用Laravel 的事件的写法 确保config/broadcasting.php 中default 不为null 原理简述Laravel 广播系统的原理其实很简单，客户端与Socket.io服务端（Laravel-echo-server) 建立连接，服务端监听驱动器事件，当驱动器产生事件时，服务端（Laravel-echo-server）监听到事件并向指定频道发送事件消息，客户端监听指定频道，收取事件消息。 建立连接驱动器本文使用Redis 作为驱动器, 请参考Laravel Redis 的配置项并保证正常使用。 服务端（发送广播）Laravel-echo-server安装需要全局安装Laravel-echo-server。1npm install -g laravel-echo-server 初始化配置使用包自带的init 命令可以快速初始化配置文件1laravel-echo-server init 首次使用可以一路回车，全使用默认配置，执行后路径下会生成 laravel-echo-server.json 文件，根据实际需要再修改配置信息。123456789101112131415161718192021222324252627282930313233343536&#123; "authHost": "dash.dev.car.co.uk", "authEndpoint": "/broadcasting/auth", "clients": [ &#123; "appId": "", "key": "" &#125; ], "database": "redis", "databaseConfig": &#123; "redis": &#123; "port": "6379" &#125; &#125;, "devMode": false, "host": null, "port": "6001", "protocol": "http", "socketio": &#123;&#125;, "secureOptions": 67108864, "sslCertPath": "", "sslKeyPath": "", "sslCertChainPath": "", "sslPassphrase": "", "subscribers": &#123; "http": true, "redis": true &#125;, "apiOriginAllow": &#123; "allowCors": false, "allowOrigin": "", "allowMethods": "", "allowHeaders": "" &#125;&#125; 注意： appId 是使用http 请求来触发广播的，如果只需要在Laravel 中使用Redis 触发广播，可以忽略此项配置。 开发时建议devMode 设为true, 可以直观的看到连接及server 运行情况。 注意驱动器的配置，给驱动器配置正确的地址及端口。 跨域请求对cookies 有限制，注意合适的跨域配置 启动1laravel-echo-server start 看到”Server ready!“ 证明server 已经启动成功了。 Laravel触发广播事件广播依赖于事件系统，这样设计是有原因的。事件系统可以很好的解耦某个逻辑的不同响应，比如用户注册后可以短信、邮件等多种方式通知用户注册成功，并执行其他操作，使用一个事件及多个监听器就可以很好的解耦业务逻辑。 定义广播事件将事件实现 Illuminate\Contracts\Broadcasting\ShouldBroadcast1234567891011use Illuminate\Broadcasting\Channel;use Illuminate\Contracts\Broadcasting\ShouldBroadcast;class BroadcastDemo implements ShouldBroadcast&#123; public function broadcastOn() &#123; // need return a channel or channels return new Channel('channel-demo'); &#125;&#125; 必须存在 broadcastOn方法，该方法返回一个频道或者频道数组，事件会被广播到这些频道。正常触发事件就可以触发广播。 广播数据Laravel 会默认将事件中public 属性自动序列化为广播数据，即允许客户端访问事件中的公有数据。但是也可以使用broadcastWith 方法更细粒度的控制广播数据。 广播驱动需要配置和laravel-echo-server 相同的驱动器，驱动器来实现发布-订阅模式，laravel 使用事件系统发布消息，laravel-echo-server订阅事件，做出回调（使用socket.io 推送消息），这里我们使用的是redis作为队列驱动程序，当laravel 触发推送到指定频道时，在redis-cli 中使用SUBSCRIBE 监听对应频道或所有频道也可以看到具体信息。 频道依然拿现实中的广播系统做类比，公共频道就像广播电台，客户端只要能连接到指定频道就都可以收听，但很多信息是不能放在公开频道上的，所以需要授权以进入频道。 频道认证当连接私有频道时，客户端向laravel-echo-server发起请求，laravel-echo-server 将此请求转发给Laravel 以判断是否应该授权。Laravel 默认授权路由为：/broadcasting/auth，通常来说使用1Broadcast::routes(); 就会注册授权路由，或者可以使用BroadcastManager 来更细粒化的控制。在routes/channels.php 中使用Broadcast::channel 方法定义授权回调，方法返回Boolean 值，回调中当前用户被当做第一个参数，额外的通配符参数会被作为后续参数。需要注意的是，由于通配符中也使用了「.」，所以参数中会只取第一个点前面的字符。实际使用中可以将「.」替换为其他字符来获取完整信息 仅广播给他人现实中，如果边听收音机边给电台热线打电话，收音机中肯定也会出现电话对话声，离得近了甚至会产生回音。网络中的广播系统自然也会有这种情况发生，但在网上是没法走开的，所以需要广播系统可以针对性的进行推送，避开触发此次广播的用户。laravel 在每个请求中使用X-Socket-ID 来标识用户，客户端可以将X-Socket-ID 设为socketId，使用axios 时库会自动向header中添加，但使用其他请求库时可以在socket 连接建立后将X-Socket-ID配置如header，可以参考以下代码:123echoInstance.connector.socket.on('connect', () =&gt; &#123; http.defaults.headers.common['X-Socket-Id'] = echoInstance.socketId();&#125;); 当请求携带有X-Socket-ID时，调用broadcast函数时使用toOthers 方法，即可将指定连接从广播接收者中排除。1broadcast(new BroadcastDemo())-&gt;toOthers(); 到目前为止，我们已经构建了一个可以适应大部分需求的广播系统的发送，接下来我们看看如何配置客户端。 客户端（接收广播）建立连接客户端需要使用 Socket.IO JavaScript库来建立文件，当启动laravel-echo-server 后，可以通过 server 地址及端口号获取Socket.IO 库，比如开发时通常使用http://localhost 与6001 端口，可以使用1http://localhost:6001/socket.io/socket.io.js 获取到Socket.IO 库。如果需要手动在客户端添加Socket.IO 库，请注意socket.io.js 版本，目前只有2.x 版本可以正常使用。 接着，我们需要在合适的时机建立实例化Echo(示例代码使用localhost 与6001端口)：123456import Echo from "laravel-echo"const EchoInstance = new Echo(&#123; broadcaster: 'socket.io', host: 'http://localhost:6001'&#125;); 实例化Echo 时，客户端的echo 库会发送http 请求到server 端请求建立连接。 加入频道建立连接后可以使用echoInstance的channel 方法加入指定频道，使用listen 监听频道上的指定事件：12345echoInstance .channel('channelName') .listen('eventName', ()=&gt;&#123; // callback &#125;) 需要退出频道时，使用leave 方法即可。]]></content>
      <tags>
        <tag>laravel</tag>
        <tag>WebSockets</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Vue CLI 3 搭建一个多页面项目]]></title>
    <url>%2F2018%2F10%2F09%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Vue%20CLI%203%20%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[为什么要用vue来做多页面应用 熟悉vue开发模式 有大量封装好的组件来用 避免加载不必要的资源 多页面中的部分单页面 如何配置首先是官方文档 其次是，(⊙o⊙)…，能搜到的都是2.x版本的，新版本连build目录都木有了（统一在vue.config.js中配置） 1234567891011121314151617181920212223module.exports = &#123; pages: &#123; index: &#123; // page 的入口 entry: 'src/index/main.js', // 模板来源 template: 'public/index.html', // 在 dist/index.html 的输出 filename: 'index.html', // 当使用 title 选项时， // template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt; title: 'Index Page', // 在这个页面中包含的块，默认情况下会包含 // 提取出来的通用 chunk 和 vendor chunk。 chunks: ['chunk-vendors', 'chunk-common', 'index'] &#125;, // 当使用只有入口的字符串格式时， // 模板会被推导为 `public/subpage.html` // 并且如果找不到的话，就回退到 `public/index.html`。 // 输出文件名会被推导为 `subpage.html`。 subpage: 'src/subpage/main.js' &#125;&#125; 参考pages的配置示例，设置一下就行。（目录不要写错了⊙︿⊙） 然后启动devServer，注意这里devServer是没有设置路由的，URL必须加上.html后缀才能访问到输出文件。 为什么要记录一下其实踩了很多坑，比如config中目录写错了，demo中模块调不到（复制其他现成页面进来的），启动devServe如何不知道如何启动具体页面。 暴露了基础知识的不足，对webpack的原理完全不清楚，上来就是胡瞎用，需要加强。 那么加油咯。]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京之行]]></title>
    <url>%2F2018%2F09%2F13%2F%E5%8C%97%E4%BA%AC%E4%B9%8B%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[北京之行行程篇9.8早上火车过去，9.11晚9点坐火车回来，全是Z开头，都是坐6个小时左右 9.8早上坐火车真心不算累，也可能大早上神清气爽，两个人开开心心吃饱喝足再出发的关系，但是，晚上回来的时候简直累死！！ 火车篇 火车硬座上睡觉是真心不舒服，时间再短也不行，而且还挤的慌。最最重要的是，我俩居然被分开了。。。为啥买票一个订单两个座会差那么多啊摔！！！ 去北京路上的风景挺好的，蓝天白云，看着电影吃着牛肉，没事望望玉米田。小虫子乱入 景点篇 故宫真的是跑断腿，但是建筑的宏伟霸气加上蓝天白云，超级超级美。 天安门广场也还好，各种震撼，特别搭配蓝天白云，顺便知道那么一点历史，心里特别有感觉，自己像一个伪历史见证者。但是天安门那一区域进去前要安检，但是这个安检只是做做样子，我觉着主要作用还是降低人流量，刷身份证才能进。不知道海外同胞是怎么过安检呢？ 中关村下了车，没感觉有啥特别的，反倒像奸商聚集地，歇了一会走人了。 北大清华两校没进去，北大是迎接新生呢，不让外来游客参观，清华园那边不想跑了。所以两个都没看成，只看了外面的样子。不过就我看到的，两个学校的校门是真的小，感觉其他学校校门都是一个比一个大，这是我们学校不用只看门面的意思吗？ 圆明园现在应该是只剩下旅游局在骗钱了，去游客中心存包人家不让存，可能是过点了（下午两点），印象分极低。当然，也可能是当时我俩都太累了，所以评价有失公道。里面大概是天鹅湖、沙盘模型、大水法（没被烧到和抢走的残石）。 看到大水法其实也挺有感慨的，毕竟国家屈辱的历史，不过更多的是百年前底层人民的悲惨，皇帝尚且有这么豪华巨大的园林（故宫的5倍大小），底层人民在面对战争的时候有什么呢？可能只剩下想活下去的意志了吧。然而不要偷这些名贵的文物啊、古树啊、石料啊，现在看来都是无价宝啊大爷们，你们把古树烧掉了弄成碳卖钱很不划算啊啊啊。当然树还能再长，和平万岁。 沙盘模型就是一个圆明园的缩略模型，离东门很近，路过了看一看还行。 天鹅湖没太有印象，当然风景很好~ 食物篇并不知道北京的特色是什么，灵光一闪那就是吃火锅了，老北京火锅，大铜锅，涮羊肉，美滋滋。 其实是没这个计划的，因为没钱，本来准备是看到啥吃啥，然而几乎上啥也没看到，要么看起来高级不敢进，要么小小餐馆还是不敢进。况且京城看起来真的是荒凉，不知道是大还是人都在外围或者是在工作，真真的看起来荒凉。人少买东西的少，但是比郑州要干净太多了。 早上在普通餐馆吃了东西，还行，不贵，听着人说带京味儿的口音还挺有意思。 跑过故宫后那个累，然而故宫北门周边并没有那种坐下来就吃的小馆子。于是北门涮肉走起。 从故宫北门走了约1.7公里，期间的小巷子小破路一度让我认为是不是走错了。还好在倒下前走到了。 说下食物，北京的铜锅涮肉都讲究清汤，一个大铜锅（给我们的是小的→_→)，中间是碳，汤开了就能咕嘟咕嘟的涮起肉来。 这个清汤锅底收我20块好不爽啊，我好穷⊙︿⊙ 鲜切羊肉一流，其他的都是还行，鲜切羊肉非常好吃，怎么描述那种感觉呢？我能说记不清了嘛。。。 其他的都是日常火锅，总之鲜切羊肉必点，39 五两。（顺便送一个伞，遮阳伞忘店里了╯﹏╰） 在这次北门火锅后还吃了另一家酒店不远的羊火涮肉，同样的操作，但是便宜太多，作为吃饱喝足的地方那是极好的，想吃特色肉这里就不太行了，都是冷冻的，鲜切（名义）羊肉吃起来也没那种感觉。 好像只是吃了两顿火锅次次吃到饱，吃饭次数好少~ 演唱会篇去北京当然是为了看花花演唱会啦，提前准备了这么久，不好好享受演唱会怎么行！！！ 所以我跑神了好多，摔。 心里压力大是一方面，我来说说让我出戏的要点： 98场 那个位置已经快是距花花最远的地方了，以我的视力很难看清楚，举着望远镜也不现实（还是只能看屏幕，看人还是远远的看的感觉） 乐器声要不要这么大啊，这一场说实话人声很小，不知道是混音的关系还是座位的关系。 总之我看不到也听不到人声，只能随着音乐嗨，进不了状态，频频出戏 99场 团票的位置果然更好，但是坐的更高更远了，能看到花花的影子，大屏幕还是看不太清。 跑了一天了真心累 个人最喜欢的两首：地球之盐、我~刚好一首开场，一首收尾~ 话说花花真的是太拼，嗓子做了雾化打了封闭，结果还是唱，而且可怕的是高音依然稳，虽然第二场有所收敛但同样各种炸，果然要吹爆我花。 1封闭主要是指将激素类的药物和局部麻醉药物混合在一起注射到疼痛或者炎症的部位， 但是也太拼了，身体会受不了的，吸血公司也是够够的： 看这行程 希望花花能早日离开这种吸血公司~ 总结这次北京行：开心~ 做人嘛，最重要的就是开心。 努力自由咯。]]></content>
      <tags>
        <tag>生活</tag>
        <tag>华晨宇</tag>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始sicp的旅程吧，scheme要跑起来]]></title>
    <url>%2F2017%2F12%2F30%2F%E5%BC%80%E5%A7%8Bsicp%E7%9A%84%E6%97%85%E7%A8%8B%E5%90%A7%2F</url>
    <content type="text"><![CDATA[作为一只萌新，知识可不能仅靠工作上的摸索踩坑和单纯经验上的积累，深入基础是十分有必要滴，而且还得应付考试不是，考试是个好理由，不敢拒绝。有需要也有必要补足计算机基础知识，那么作为野生程序员，咋么做呢？参考前人的经验，首选自然是萧大的编程入门指南,而我现在不应该再入门了吧，那自然搞起sicp啦。 为什么要学sicp多人推荐，评分高，那就没的说了呗。大部分理由都可以参见这篇文章：老赵书托（2）：计算机程序的构造与解释 - 老赵点滴 - 追求编程之美 为什么不学python版本的sicp说实话学python版的的确效率高、收益大，不过我也有自己的考虑。 - 我看过一遍python版的中文翻译，然而并不懂，和其他的python书看起来并没什么区别，或许我当年太弱鸡？ - 基于上，python版的就要配合课程进行学习，然而时间决定了我目前不太能常看视频 - 谁说的刷了老版的就看不了新版的哦，cs61扔入计划 准备工作ok,开始了没什么疑问，然而刚刚上去我就经受了小小打击，那就是sicp所用的语言。scheme应该是简单但强大的语言了吧，但着实小众，作为方言还有方言，怎么运行成了一个问题。依我目前的了解，有以下几种方法跑。 - 云端跑 - 好处 - 复制粘贴即可运行 - 坏处 - 浏览器必须的 - 联网必须的 - 复杂了就玩不转了 - 本地跑 - Emacs + 插件 - 好处 - 未知，因为下载了并没有安装，但是听说这是个神级编译器，参见[一年成为 Emacs 高手 (像神一样使用编辑器)](https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org)对手是vim等，以后有缘再见吧 - 坏处 - 没用过，上手需要熟悉一段时间 - 开源包，如Racket、MIT Scheme - 参考[程序设计技术和方法](http://www.math.pku.edu.cn/teachers/qiuzy/progtech/) - 好处 - 安装即用 - 坏处 - 在老婆的电脑上装了MIT Scheme，运行及其不便，可能因为我是萌新吧 - windows不友好，自我感觉 - Racket并不能做所有sicp的题目 - 扩展包，如biwascheme - 此项目官网[biwascheme](http://www.biwascheme.org/) - 好处 - 不仅能本地运行，还能使用本地JavaScript来跑，HTML中看结果，简直666 - 不仅能在HTML里预览，还可以扔到JavaScript来跑，更加666。参见[Github](https://github.com/biwascheme/biwascheme) - 坏处 - 未知 以上准备运行的参考资料：1、sicp学习前的几个准备资料2、安装scheme解释器3、Scheme 编程环境的设置4、MIT-scheme biwascheme的使用好处多多，作为前端用起vscode又很方便，HTML预览也好，run code一键都很方便，那肯定是用它的咯。How to use with HTML： 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;div id=&quot;bs-console&quot;&gt;&lt;/div&gt; &lt;script src=&quot;biwascheme.js&quot;&gt; (define (test x) (+ x x)) (print (test 2)) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; How to use with node.js to run a biwa script 1234567$ npm install biwaschemecreate a file a.scm:(display &quot;Hello, world!&quot;) (newline)$ biwas a.scm How to use from inside node.js as a module 1234567$ npm install biwaschemecreate a file server.js:var BiwaScheme = require(&quot;biwascheme&quot;); BiwaScheme.run(&quot;(+ 1 2)&quot;); // or // BiwaScheme.run_file(&quot;a.scm&quot;);$ node server.js 这样子可以愉快的刷题啦，希望可以帮到你们。我这样子这么费时费力的记录还有时间看书吗，摔！]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>sicp</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序框架——wepy]]></title>
    <url>%2F2017%2F12%2F27%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94wepy%2F</url>
    <content type="text"><![CDATA[小程序的写法实在不太敢恭维。wepy参照了Vue的一些风格和特性，对小程序开发进行二次封装，更贴近MVVM架构。 文件说明 wpy文件可使用Vue的代码提示和代码风格 wpy文件内容主要分三块，脚本、结构、样式。三个标签均支持lang和src属性，当src属性有效时，会忽略内联代码 脚本部分 入口 继承自wepy.app类，此处语法参见ES6实现继承 改进 小程序对组件化支持非常不友好，wepy改进了组件开发的方法。组件的所有业务和功能在本身实现，组件之间彼此隔离]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——zepto对象好用的方法都是如何设计的]]></title>
    <url>%2F2017%2F09%2F30%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94zepto%E5%AF%B9%E8%B1%A1%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%9A%84%2F</url>
    <content type="text"><![CDATA[zepto的核心方法一部分通过给$增加属性而给$(要知道$是一个函数，即是一个对象)，另一部分定义在$.fn这个属性上，然后将zepto.Z.prototype指向$.fn，即所有的Z对象的proto指向$.fn，于是可访问到其中的方法。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——设计]]></title>
    <url>%2F2017%2F09%2F27%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[zepto对象zepto或是jQuery的设计思想几乎是一致的，通过选择器获取一个DOM对象，然后对这个对象进行操作。我们来看zepto对象是什么样子。进入Zepto文档界面，打开控制台，使用$取一个元素，将它打印出来。1&lt;h3 id=&quot;download&quot;&gt;下载 Zepto&lt;/h3&gt; 这个元素用的是id呀，就它了 12345let ele = $(&apos;#download&apos;)ele[h3#download, selector: &quot;#download&quot;]Array.isArray(ele)true 看起来是一个数组对象，但实际上并不是,isArray()不要骗人啊~我们知道JavaScript中数组是Array对象的实例，那么ele是么？ 1234ele.__proto__.constructor === Array;falseele instanceof Arrayfalse instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。显而易见，ele并不是Array构建出来的，用Array构建出来也没那么多方法用啊，除非大规模重写Array的proto对象，那不是太惨了。 那么是谁构建了这个类数组对象？我们先来看看$ $ ƒ (selector, context){ return zepto.init(selector, context) $是一个函数来看看源码 var Zepto = (function() { })() window.Zepto = Zepto window.$ === undefined &amp;&amp; (window.$ = Zepto) $被挂载到window上，要知道在浏览器中所有JavaScript 全局对象、函数以及变量均自动成为window 对象的成员，所以$是全局对象，且是Zepto函数，很明显Zepto函数是一个构造函数。 源代码解析部分请配合源代码和搜索食用 zepto.init前面已经知道$是一个函数，参数为(selector,context)，返回一个函数，我们先来看看返回的函数是什么样子。搜索到zepto.init，可以看到英文注释： `$.zepto.init` is Zepto&apos;s counterpart to jQuery&apos;s `$.fn.init` and takes a CSS selector and an optional context (and handles various special cases). // This method can be overriden in plugins. 简单来说就是这个方法类似jQuery的$.fn.init方法，传入一个CSS选择器和一个上下文。这个函数还能被插件改写。显而易见，这是为了生成之前的类数组对象做准备，选取其中的dom与环境，来看看这个函数的内部。$函数的作用有以下几种： 把普通DOM对象包装成zepto对象 当页面ready时加载函数 充当选择器选择DOM并将其包装成zepto对象 生成一个dom元素 详情分析请看源代码解析部分。加载函数部分比较好理解，我们先来看看是如何构建zepto对象的。 构建zepto对象当selector是选择器时，查找dom。 zepto.qsa()方法用来选择dom，使用字符串匹配后分别使用各种get方法进行选择dom，最后特殊情况使用querySelectorAll和querySelector。因为它俩的速度要慢得多 找到dom后把dom与selector传给zepto.Z这个构造函数。 zepto.Z = function(dom, selector) { dom = dom || [] dom.__proto__ = $.fn dom.selector = selector || &apos;&apos; return dom } zepto.Z.prototype = $.fn 可以看到dom的隐式原型被指向$.fn,zepto.Z.prototype也被指向$.fn，因为隐式原型与显式原型的关系，实际上只要一个生效就生效了。$.fn中定义了zepto类数组对象所有方法，通过原型链这些方法就可以共享啦。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zepto源码分析——序]]></title>
    <url>%2F2017%2F09%2F27%2Fzepto%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[为什么17年还要读zepto的源码？问这个问题首先要清除为什么读源码。程序员阅读源码是一种什么心态？源码对编程意义何在？如何才能更好阅读代码？这个问题高票答案基本上已经解释的很好了，但我还想再补充几点。 - 向优秀的人学习，这个毫无疑问。 - 人大多是依靠模仿学习的，想要模仿，必须先了解。 - 巩固基础，而基础有多重要就不用说了吧。 确实mvvm框架极火爆，也的确好用，但是依我现在目前的水平来看（js基础不是很牢，计算机基础也跟不上），学习优秀库是一个极其方便且好用的学习以及复习策略。 为什么是zepto？zepto大家都说好。还有一点是在几个月以前我已经根据前辈的源码分析熟悉了一遍并自己仿制了一个类zepto的库，重拾起来应该更轻松。还有一点，zepto的分析已经有很多人进行了，资料也很多，基本上没什么大问题，但是大都有一点缺点，就是不够通俗易懂。依我来看前端JavaScript水平的差距是巨大的。初学者可能一点一点的啃过基础大部头，以为自己已经了解了JavaScript，却被实际的各种用法所困惑。我作为一个初学者，希望可以通过阅读和拆析zepto的源码来略微的垫高这一沟壑。 究竟怎么阅读？读之前首先一定要会用吧，如果不会用建议去看看zepto的文档，和jQuery很像。会了基本的用法之后就可以准备阅读了。首先需要源代码的源文件，其次要找好的资料。 什么才算是好的资料？在我看来至少要满足以下几点： - 语句通顺易懂 - 不办弄概念 - 最好能引导人进行主动阅读 - 对一些概念进行扩展 在zepto源码分析的诸多资料中，个人认为称的上好的资料应当是王福朋老师的zepto设计和源码分析,在慕课网上的课程讲解十分详细，但个人推荐阅读文字版.在js进阶的资料中，个人认为最好的应当是曾探老师的JavaScript设计模式与开发实践]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>JavaScript</tag>
        <tag>zepto</tag>
        <tag>自述</tag>
      </tags>
  </entry>
</search>
